{"version":3,"sources":["server/tools.js","server/server.js","app.js"],"names":["publicPath","process","env","FrontEnd","resolve","__dirname","comingSoonPath","port","PORT","app","use","static","req","res","next","get","send","express","console","log","listen","white","bgRed","MY_DATABASE_PASSWORD"],"mappings":"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","file":"app.map","sourceRoot":"..\\src","sourcesContent":["import path from 'path';\r\nexport default {\r\n  publicPath() {\r\n    if (process.env.FrontEnd) {\r\n      return path.resolve(__dirname, './../', 'public/dist');\r\n    }\r\n    return path.resolve(__dirname, './../', 'public/prod');\r\n  },\r\n  comingSoonPath() {\r\n    return path.resolve(__dirname, './../', 'comingSoon/prod');\r\n  }\r\n};\r\n","// ----- Package Imports ----- //\r\nimport express from 'express';\r\nimport compression from 'compression';\r\nimport chalk from 'chalk';\r\n// ----- File Imports ----- //\r\nimport tools from './tools';\r\n// ----- End Imports ----- //\r\n\r\nconst port = process.env.PORT || 3000;\r\n// console.log(`Port: ${port} `);\r\nconst app = express();\r\n\r\n// mongoose.connect(\"mongodb://srv-captain--mongo-db/mydatabase\", { useMongoClient: true });\r\n// <-------------- compression --------------> //\r\napp.use(compression());\r\n\r\napp.use(\r\n  express.static(tools.comingSoonPath()),\r\n  (req, res, next) => {\r\n    next();\r\n  },\r\n);\r\n\r\n// app.use(express.static(tools.publicPath()));\r\n\r\napp.get('/express_backend', (req, res) => {\r\n  res.send({\r\n    express: 'YOUR EXPRESS BACKEND IS CONNECTED TO REACT!!!!!',\r\n  });\r\n  console.log('Connection successful!');\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(\r\n    chalk.white.bgRed(`Server started on port ${port} ...`),\r\n  );\r\n});\r\n","import '@babel/polyfill';\r\nimport 'dotenv/config';\r\nconsole.log(`This is my ${process.env.MY_DATABASE_PASSWORD} `);\r\n\r\nimport './server/server';\r\n"]}