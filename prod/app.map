{"version":3,"sources":["server/tools/tools.js","server/server.js","app.js"],"names":["pathFix","process","env","TESTING","publicPath","FrontEnd","resolve","__dirname","comingSoonPath","app","port","PORT","use","static","get","req","res","send","express","console","log","listen","white","bgRed","MY_DATABASE_PASSWORD"],"mappings":"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","file":"app.map","sourceRoot":"..\\src","sourcesContent":["import path from 'path';\r\nconst pathFix = () => {\r\n  if (process.env.TESTING) {\r\n    return './../../../';\r\n  }\r\n  return './../';\r\n};\r\nexport default {\r\n  /**\r\n   * Returns the Path of the public folder\r\n   *\r\n   * **Do not change if you don't know what you're doing!!**\r\n   */\r\n  publicPath() {\r\n    if (process.env.FrontEnd) {\r\n      return path.resolve(__dirname, pathFix(), 'public/dist');\r\n    }\r\n    return path.resolve(__dirname, pathFix(), 'public/prod');\r\n  },\r\n  comingSoonPath() {\r\n    return path.resolve(__dirname, pathFix(), 'comingSoon/prod');\r\n  },\r\n};\r\n","// ----- Package Imports ----- //\r\nimport express from 'express';\r\nimport compression from 'compression';\r\nimport chalk from 'chalk';\r\n// ----- File Imports ----- //\r\nimport tools from './tools/tools';\r\n// ----- End Imports ----- //\r\n\r\nconst port = process.env.PORT || 3000;\r\n// console.log(`Port: ${port} `);\r\nconst app = express();\r\n\r\n// mongoose.connect(\"mongodb://srv-captain--mongo-db/mydatabase\", { useMongoClient: true });\r\n// <-------------- compression --------------> //\r\napp.use(compression());\r\n\r\n// app.use(express.static(tools.comingSoonPath()));\r\n\r\napp.use(express.static(tools.publicPath()));\r\n\r\napp.get('/express_backend', (req, res) => {\r\n  res.send({\r\n    express: 'YOUR EXPRESS BACKEND IS CONNECTED TO REACT!!!!!',\r\n  });\r\n  console.log('Connection successful!');\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(\r\n    chalk.white.bgRed(`Server started on port ${port} ...`),\r\n  );\r\n});\r\n\r\nexport default app;\r\n","import '@babel/polyfill';\r\nimport 'dotenv/config';\r\nconsole.log(`This is my ${process.env.MY_DATABASE_PASSWORD} `);\r\n\r\nimport './server/server';\r\n"]}